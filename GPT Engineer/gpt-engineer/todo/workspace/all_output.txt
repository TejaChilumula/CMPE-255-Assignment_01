Based on the requirements, here are the core classes, functions, and methods that will be necessary for the todo application:

1. TodoItem class:
   - Properties: id, title, completed
   - Methods: None

2. TodoList class:
   - Properties: items (array of TodoItem objects)
   - Methods: addTodoItem, editTodoItem, deleteTodoItem, markTodoItemAsCompleted, getTodoItems

3. UI class:
   - Properties: None
   - Methods: renderTodoList, renderTodoItem, addTodoItem, editTodoItem, deleteTodoItem, markTodoItemAsCompleted

Now, let's proceed with creating the necessary files and implementing the code.

1. index.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Todo App</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div id="app"></div>
  <script src="app.js"></script>
</body>
</html>
```

2. styles.css
```css
/* Add your amazing CSS styles here */
```

3. app.js
```javascript
class TodoItem {
  constructor(id, title, completed) {
    this.id = id;
    this.title = title;
    this.completed = completed;
  }
}

class TodoList {
  constructor() {
    this.items = [];
  }

  addTodoItem(title) {
    const id = Date.now().toString();
    const newItem = new TodoItem(id, title, false);
    this.items.push(newItem);
  }

  editTodoItem(id, newTitle) {
    const item = this.items.find(item => item.id === id);
    if (item) {
      item.title = newTitle;
    }
  }

  deleteTodoItem(id) {
    this.items = this.items.filter(item => item.id !== id);
  }

  markTodoItemAsCompleted(id) {
    const item = this.items.find(item => item.id === id);
    if (item) {
      item.completed = true;
    }
  }

  getTodoItems() {
    return this.items;
  }
}

class UI {
  constructor(todoList) {
    this.todoList = todoList;
    this.todoListElement = document.getElementById('app');
  }

  renderTodoList() {
    this.todoListElement.innerHTML = '';
    const todoItems = this.todoList.getTodoItems();
    todoItems.forEach(item => {
      const todoItemElement = this.renderTodoItem(item);
      this.todoListElement.appendChild(todoItemElement);
    });
  }

  renderTodoItem(item) {
    const todoItemElement = document.createElement('div');
    todoItemElement.classList.add('todo-item');
    todoItemElement.innerHTML = `
      <input type="checkbox" ${item.completed ? 'checked' : ''}>
      <span>${item.title}</span>
      <button class="edit-button">Edit</button>
      <button class="delete-button">Delete</button>
    `;
    const checkbox = todoItemElement.querySelector('input[type="checkbox"]');
    checkbox.addEventListener('change', () => {
      this.todoList.markTodoItemAsCompleted(item.id);
      this.renderTodoList();
    });
    const editButton = todoItemElement.querySelector('.edit-button');
    editButton.addEventListener('click', () => {
      const newTitle = prompt('Enter new title:', item.title);
      if (newTitle) {
        this.todoList.editTodoItem(item.id, newTitle);
        this.renderTodoList();
      }
    });
    const deleteButton = todoItemElement.querySelector('.delete-button');
    deleteButton.addEventListener('click', () => {
      this.todoList.deleteTodoItem(item.id);
      this.renderTodoList();
    });
    return todoItemElement;
  }

  addTodoItem() {
    const title = prompt('Enter todo item title:');
    if (title) {
      this.todoList.addTodoItem(title);
      this.renderTodoList();
    }
  }
}

const todoList = new TodoList();
const ui = new UI(todoList);
ui.renderTodoList();

const addButton = document.createElement('button');
addButton.textContent = 'Add Todo';
addButton.addEventListener('click', () => {
  ui.addTodoItem();
});
document.body.appendChild(addButton);
```

4. package.json
```json
{
  "name": "todo-app",
  "version": "1.0.0",
  "description": "A JavaScript-based todo application",
  "scripts": {
    "start": "parcel index.html"
  },
  "devDependencies": {
    "parcel-bundler": "^1.12.4"
  }
}
```

That's it! The todo application is now implemented. To run the application, you can use a bundler like Parcel by running the command `npm start`. This will start a development server and open the application in your default browser.